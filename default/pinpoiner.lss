
pinpoiner.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000222  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000105  00800060  00800060  00000296  2**0
                  ALLOC
  2 .debug_aranges 00000020  00000000  00000000  00000296  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 00000092  00000000  00000000  000002b6  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   000002f9  00000000  00000000  00000348  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 0000012f  00000000  00000000  00000641  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   000002f5  00000000  00000000  00000770  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000040  00000000  00000000  00000a68  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    00000152  00000000  00000000  00000aa8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    000001ac  00000000  00000000  00000bfa  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	21 c0       	rjmp	.+66     	; 0x46 <__bad_interrupt>
   4:	20 c0       	rjmp	.+64     	; 0x46 <__bad_interrupt>
   6:	20 c0       	rjmp	.+64     	; 0x48 <__vector_3>
   8:	1e c0       	rjmp	.+60     	; 0x46 <__bad_interrupt>
   a:	1d c0       	rjmp	.+58     	; 0x46 <__bad_interrupt>
   c:	1c c0       	rjmp	.+56     	; 0x46 <__bad_interrupt>
   e:	1b c0       	rjmp	.+54     	; 0x46 <__bad_interrupt>
  10:	1a c0       	rjmp	.+52     	; 0x46 <__bad_interrupt>
  12:	32 c0       	rjmp	.+100    	; 0x78 <__vector_9>
  14:	18 c0       	rjmp	.+48     	; 0x46 <__bad_interrupt>
  16:	17 c0       	rjmp	.+46     	; 0x46 <__bad_interrupt>
  18:	16 c0       	rjmp	.+44     	; 0x46 <__bad_interrupt>
  1a:	15 c0       	rjmp	.+42     	; 0x46 <__bad_interrupt>
  1c:	14 c0       	rjmp	.+40     	; 0x46 <__bad_interrupt>
  1e:	13 c0       	rjmp	.+38     	; 0x46 <__bad_interrupt>
  20:	12 c0       	rjmp	.+36     	; 0x46 <__bad_interrupt>
  22:	11 c0       	rjmp	.+34     	; 0x46 <__bad_interrupt>
  24:	10 c0       	rjmp	.+32     	; 0x46 <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_clear_bss>:
  32:	11 e0       	ldi	r17, 0x01	; 1
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	01 c0       	rjmp	.+2      	; 0x3c <.do_clear_bss_start>

0000003a <.do_clear_bss_loop>:
  3a:	1d 92       	st	X+, r1

0000003c <.do_clear_bss_start>:
  3c:	a5 36       	cpi	r26, 0x65	; 101
  3e:	b1 07       	cpc	r27, r17
  40:	e1 f7       	brne	.-8      	; 0x3a <.do_clear_bss_loop>
  42:	34 d0       	rcall	.+104    	; 0xac <main>
  44:	ec c0       	rjmp	.+472    	; 0x21e <_exit>

00000046 <__bad_interrupt>:
  46:	dc cf       	rjmp	.-72     	; 0x0 <__vectors>

00000048 <__vector_3>:
// AVER_BUF_SZ /38Hz  = average period

volatile unsigned short _tachValue;
volatile unsigned char _isTachValueReady, _isSoundOn;

ISR(TIMER2_COMP_vect) {
  48:	1f 92       	push	r1
  4a:	0f 92       	push	r0
  4c:	0f b6       	in	r0, 0x3f	; 63
  4e:	0f 92       	push	r0
  50:	11 24       	eor	r1, r1
  52:	8f 93       	push	r24
 TCNT2 = 0;
  54:	14 bc       	out	0x24, r1	; 36
 if(_isSoundOn) {
  56:	80 91 61 00 	lds	r24, 0x0061
  5a:	88 23       	and	r24, r24
  5c:	39 f0       	breq	.+14     	; 0x6c <__vector_3+0x24>
  if((PORTB & _BV(PB1)) != 0) { PORTB |= _BV(PB2); PORTB &= ~_BV(PB1);
  5e:	c1 9b       	sbis	0x18, 1	; 24
  60:	03 c0       	rjmp	.+6      	; 0x68 <__vector_3+0x20>
  62:	c2 9a       	sbi	0x18, 2	; 24
  64:	c1 98       	cbi	0x18, 1	; 24
  66:	02 c0       	rjmp	.+4      	; 0x6c <__vector_3+0x24>
  } else {  PORTB |= _BV(PB1); PORTB &= ~_BV(PB2); }
  68:	c1 9a       	sbi	0x18, 1	; 24
  6a:	c2 98       	cbi	0x18, 2	; 24
 }
}
  6c:	8f 91       	pop	r24
  6e:	0f 90       	pop	r0
  70:	0f be       	out	0x3f, r0	; 63
  72:	0f 90       	pop	r0
  74:	1f 90       	pop	r1
  76:	18 95       	reti

00000078 <__vector_9>:

ISR(TIMER0_OVF_vect) {
  78:	1f 92       	push	r1
  7a:	0f 92       	push	r0
  7c:	0f b6       	in	r0, 0x3f	; 63
  7e:	0f 92       	push	r0
  80:	11 24       	eor	r1, r1
  82:	8f 93       	push	r24
  84:	9f 93       	push	r25
 _tachValue = TCNT1; 
  86:	8c b5       	in	r24, 0x2c	; 44
  88:	9d b5       	in	r25, 0x2d	; 45
  8a:	90 93 63 01 	sts	0x0163, r25
  8e:	80 93 62 01 	sts	0x0162, r24
 TCNT1 = 0; TCNT0 = 0;   
  92:	1d bc       	out	0x2d, r1	; 45
  94:	1c bc       	out	0x2c, r1	; 44
  96:	12 be       	out	0x32, r1	; 50
// debug
// if((PORTB & _BV(PB2)) == 0) PORTB |= _BV(PB2);
// else PORTB &= ~_BV(PB2);
 _isTachValueReady = TRUE;
  98:	81 e0       	ldi	r24, 0x01	; 1
  9a:	80 93 64 01 	sts	0x0164, r24
}
  9e:	9f 91       	pop	r25
  a0:	8f 91       	pop	r24
  a2:	0f 90       	pop	r0
  a4:	0f be       	out	0x3f, r0	; 63
  a6:	0f 90       	pop	r0
  a8:	1f 90       	pop	r1
  aa:	18 95       	reti

000000ac <main>:
                  

unsigned short _storedValue[AVER_BUF_SZ];
unsigned char _storedValuePtr = 0;

int main(void) {
  ac:	cf 93       	push	r28
  ae:	df 93       	push	r29
 unsigned short comparisonFrValue = 0, comparisonCnt = 0, firstFrValue;
 unsigned short v;

// debug port
 DDRB |= _BV(PB2); PORTB |= _BV(PB2);
  b0:	ba 9a       	sbi	0x17, 2	; 23
  b2:	c2 9a       	sbi	0x18, 2	; 24

//--------- configure block --------------
 LED_INIT
  b4:	88 9a       	sbi	0x11, 0	; 17
 VIBR_INIT
  b6:	8d 9a       	sbi	0x11, 5	; 17

// configure Timer0 as counter of input fr.
// (XCK/T0) PD4 - External clock source on T0 pin. Clock on rising edge.
 DDRD &= ~_BV(PD4);// PORTD |= _BV(PD4); // pull up T0 source
  b8:	8c 98       	cbi	0x11, 4	; 17
 TCCR0 |= _BV(CS00) | _BV(CS01) | _BV(CS02);  
  ba:	83 b7       	in	r24, 0x33	; 51
  bc:	87 60       	ori	r24, 0x07	; 7
  be:	83 bf       	out	0x33, r24	; 51
 TIMSK |= _BV(TOIE0);  // Enable timer 0 overflow interrupt  
  c0:	89 b7       	in	r24, 0x39	; 57
  c2:	81 60       	ori	r24, 0x01	; 1
  c4:	89 bf       	out	0x39, r24	; 57

// configure Timer1 as counter (Normal)
 TCCR1A=(0<<WGM11)|(0<<WGM10); 
  c6:	1f bc       	out	0x2f, r1	; 47
 TCCR1B=(0<<WGM13)|(0<<WGM12)|(0<<CS12)|(0<<CS11)|(1<<CS10); 
  c8:	81 e0       	ldi	r24, 0x01	; 1
  ca:	8e bd       	out	0x2e, r24	; 46
 TCNT1 = 0;
  cc:	1d bc       	out	0x2d, r1	; 45
  ce:	1c bc       	out	0x2c, r1	; 44

//configure Timer2 as counter (Normal)
// DDRB |= _BV(PB1) | _BV(PB2);
 OCR2 = 100;
  d0:	84 e6       	ldi	r24, 0x64	; 100
  d2:	83 bd       	out	0x23, r24	; 35
 _isSoundOn = FALSE;
  d4:	10 92 61 00 	sts	0x0061, r1
 TCCR2 |= _BV(CS22) | _BV(CS21) | _BV(CS20);
  d8:	85 b5       	in	r24, 0x25	; 37
  da:	87 60       	ori	r24, 0x07	; 7
  dc:	85 bd       	out	0x25, r24	; 37
  de:	80 ed       	ldi	r24, 0xD0	; 208
  e0:	97 e0       	ldi	r25, 0x07	; 7
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  e2:	2a e4       	ldi	r18, 0x4A	; 74
  e4:	31 e0       	ldi	r19, 0x01	; 1
  e6:	f9 01       	movw	r30, r18
  e8:	31 97       	sbiw	r30, 0x01	; 1
  ea:	f1 f7       	brne	.-4      	; 0xe8 <main+0x3c>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
  ec:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
  ee:	d9 f7       	brne	.-10     	; 0xe6 <main+0x3a>
// TIMSK |= _BV(OCIE2);  // Enable timer 0 overflow interrupt  
 

 _delay_ms(200);
 VIBR_OFF
  f0:	95 9a       	sbi	0x12, 5	; 18
  f2:	80 ed       	ldi	r24, 0xD0	; 208
  f4:	97 e0       	ldi	r25, 0x07	; 7
  f6:	2a e4       	ldi	r18, 0x4A	; 74
  f8:	31 e0       	ldi	r19, 0x01	; 1
  fa:	f9 01       	movw	r30, r18
  fc:	31 97       	sbiw	r30, 0x01	; 1
  fe:	f1 f7       	brne	.-4      	; 0xfc <main+0x50>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 100:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 102:	d9 f7       	brne	.-10     	; 0xfa <main+0x4e>
 _delay_ms(200);

 sei();
 104:	78 94       	sei
 106:	40 e0       	ldi	r20, 0x00	; 0
 108:	50 e0       	ldi	r21, 0x00	; 0
 10a:	01 c0       	rjmp	.+2      	; 0x10e <main+0x62>
 10c:	ab 01       	movw	r20, r22
 10e:	20 e0       	ldi	r18, 0x00	; 0
 110:	30 e0       	ldi	r19, 0x00	; 0

//---------- calibrate loop ------------
 while(TRUE) {
  LED_ON
 112:	90 98       	cbi	0x12, 0	; 18
  if(_isTachValueReady) {
 114:	80 91 64 01 	lds	r24, 0x0164
 118:	88 23       	and	r24, r24
 11a:	d9 f3       	breq	.-10     	; 0x112 <main+0x66>
   LED_OFF
 11c:	90 9a       	sbi	0x12, 0	; 18
   v = _tachValue; _isTachValueReady = FALSE;
 11e:	60 91 62 01 	lds	r22, 0x0162
 122:	70 91 63 01 	lds	r23, 0x0163
 126:	10 92 64 01 	sts	0x0164, r1
   if(abs(comparisonFrValue-v) <= COMPARE_LEVEL) {
 12a:	ca 01       	movw	r24, r20
 12c:	86 1b       	sub	r24, r22
 12e:	97 0b       	sbc	r25, r23
 130:	ef ef       	ldi	r30, 0xFF	; 255
 132:	84 3f       	cpi	r24, 0xF4	; 244
 134:	9e 07       	cpc	r25, r30
 136:	54 f3       	brlt	.-44     	; 0x10c <main+0x60>
 138:	0d 97       	sbiw	r24, 0x0d	; 13
 13a:	44 f7       	brge	.-48     	; 0x10c <main+0x60>
    comparisonCnt++;
 13c:	2f 5f       	subi	r18, 0xFF	; 255
 13e:	3f 4f       	sbci	r19, 0xFF	; 255
    if(comparisonCnt > MAX_COMPARE) break;
 140:	25 31       	cpi	r18, 0x15	; 21
 142:	31 05       	cpc	r19, r1
 144:	30 f3       	brcs	.-52     	; 0x112 <main+0x66>
 146:	ea 01       	movw	r28, r20
    comparisonCnt = 0;
    comparisonFrValue = v;
   }
  }
 }
 LED_OFF
 148:	90 9a       	sbi	0x12, 0	; 18
 _storedValuePtr = 0; firstFrValue = comparisonFrValue;
 14a:	10 92 60 00 	sts	0x0060, r1
 14e:	e2 e6       	ldi	r30, 0x62	; 98
 150:	f0 e0       	ldi	r31, 0x00	; 0
 for(v = 0; v < AVER_BUF_SZ; v++) _storedValue[v] = comparisonFrValue;
 152:	41 93       	st	Z+, r20
 154:	51 93       	st	Z+, r21
 156:	71 e0       	ldi	r23, 0x01	; 1
 158:	e2 36       	cpi	r30, 0x62	; 98
 15a:	f7 07       	cpc	r31, r23
 15c:	d1 f7       	brne	.-12     	; 0x152 <main+0xa6>

 VIBR_ON
 15e:	95 98       	cbi	0x12, 5	; 18
 160:	80 ed       	ldi	r24, 0xD0	; 208
 162:	97 e0       	ldi	r25, 0x07	; 7
 164:	2a e4       	ldi	r18, 0x4A	; 74
 166:	31 e0       	ldi	r19, 0x01	; 1
 168:	f9 01       	movw	r30, r18
 16a:	31 97       	sbiw	r30, 0x01	; 1
 16c:	f1 f7       	brne	.-4      	; 0x16a <main+0xbe>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 16e:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 170:	d9 f7       	brne	.-10     	; 0x168 <main+0xbc>
 _delay_ms(200);
 VIBR_OFF
 172:	95 9a       	sbi	0x12, 5	; 18
 174:	80 ed       	ldi	r24, 0xD0	; 208
 176:	97 e0       	ldi	r25, 0x07	; 7
 178:	2a e4       	ldi	r18, 0x4A	; 74
 17a:	31 e0       	ldi	r19, 0x01	; 1
 17c:	f9 01       	movw	r30, r18
 17e:	31 97       	sbiw	r30, 0x01	; 1
 180:	f1 f7       	brne	.-4      	; 0x17e <main+0xd2>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 182:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 184:	d9 f7       	brne	.-10     	; 0x17c <main+0xd0>
 186:	60 e0       	ldi	r22, 0x00	; 0
 _delay_ms(200);

//-------- main cycle --------------
 while(TRUE) {
  if(_isTachValueReady) {
 188:	80 91 64 01 	lds	r24, 0x0164
 18c:	88 23       	and	r24, r24
 18e:	e1 f3       	breq	.-8      	; 0x188 <main+0xdc>
   LED_OFF
 190:	90 9a       	sbi	0x12, 0	; 18
   VIBR_OFF
 192:	95 9a       	sbi	0x12, 5	; 18
 //  _isSoundOn = FALSE;
   v = _tachValue; _isTachValueReady = FALSE;
 194:	20 91 62 01 	lds	r18, 0x0162
 198:	30 91 63 01 	lds	r19, 0x0163
 19c:	10 92 64 01 	sts	0x0164, r1
   
   if(comparisonFrValue < v && (v-comparisonFrValue) > COMPARE_LEVEL) {
 1a0:	42 17       	cp	r20, r18
 1a2:	53 07       	cpc	r21, r19
 1a4:	38 f4       	brcc	.+14     	; 0x1b4 <main+0x108>
 1a6:	c9 01       	movw	r24, r18
 1a8:	84 1b       	sub	r24, r20
 1aa:	95 0b       	sbc	r25, r21
 1ac:	0d 97       	sbiw	r24, 0x0d	; 13
 1ae:	40 f0       	brcs	.+16     	; 0x1c0 <main+0x114>
//    _isSoundOn = TRUE; OCR2 = 10+v-comparisonFrValue;
    LED_ON
 1b0:	90 98       	cbi	0x12, 0	; 18
 1b2:	05 c0       	rjmp	.+10     	; 0x1be <main+0x112>
    VIBR_ON
   } else {
    if(comparisonFrValue >= v && (comparisonFrValue-v) > COMPARE_LEVEL) {
 1b4:	ca 01       	movw	r24, r20
 1b6:	82 1b       	sub	r24, r18
 1b8:	93 0b       	sbc	r25, r19
 1ba:	0d 97       	sbiw	r24, 0x0d	; 13
 1bc:	08 f0       	brcs	.+2      	; 0x1c0 <main+0x114>
//     _isSoundOn = TRUE; OCR2 = 50+v-comparisonFrValue;
     VIBR_ON
 1be:	95 98       	cbi	0x12, 5	; 18
	}
   }   
     // temperature drift correction
   if(abs(firstFrValue - v) < COMPARE_LEVEL_OVER) {
 1c0:	ce 01       	movw	r24, r28
 1c2:	82 1b       	sub	r24, r18
 1c4:	93 0b       	sbc	r25, r19
 1c6:	ef ef       	ldi	r30, 0xFF	; 255
 1c8:	89 3d       	cpi	r24, 0xD9	; 217
 1ca:	9e 07       	cpc	r25, r30
 1cc:	ec f2       	brlt	.-70     	; 0x188 <main+0xdc>
 1ce:	88 97       	sbiw	r24, 0x28	; 40
 1d0:	dc f6       	brge	.-74     	; 0x188 <main+0xdc>
    unsigned long s = 0;
    if(_storedValuePtr >= AVER_BUF_SZ) _storedValuePtr = 0;
 1d2:	67 fd       	sbrc	r22, 7
 1d4:	60 e0       	ldi	r22, 0x00	; 0
    _storedValue[_storedValuePtr++] = v;
 1d6:	e6 2f       	mov	r30, r22
 1d8:	f0 e0       	ldi	r31, 0x00	; 0
 1da:	ee 0f       	add	r30, r30
 1dc:	ff 1f       	adc	r31, r31
 1de:	ee 59       	subi	r30, 0x9E	; 158
 1e0:	ff 4f       	sbci	r31, 0xFF	; 255
 1e2:	31 83       	std	Z+1, r19	; 0x01
 1e4:	20 83       	st	Z, r18
 1e6:	6f 5f       	subi	r22, 0xFF	; 255
 1e8:	e2 e6       	ldi	r30, 0x62	; 98
 1ea:	f0 e0       	ldi	r31, 0x00	; 0
 1ec:	20 e0       	ldi	r18, 0x00	; 0
 1ee:	30 e0       	ldi	r19, 0x00	; 0
 1f0:	40 e0       	ldi	r20, 0x00	; 0
 1f2:	50 e0       	ldi	r21, 0x00	; 0
    for(v = 0; v < AVER_BUF_SZ; v++) s += _storedValue[v];
 1f4:	81 91       	ld	r24, Z+
 1f6:	91 91       	ld	r25, Z+
 1f8:	a0 e0       	ldi	r26, 0x00	; 0
 1fa:	b0 e0       	ldi	r27, 0x00	; 0
 1fc:	28 0f       	add	r18, r24
 1fe:	39 1f       	adc	r19, r25
 200:	4a 1f       	adc	r20, r26
 202:	5b 1f       	adc	r21, r27
 204:	71 e0       	ldi	r23, 0x01	; 1
 206:	e2 36       	cpi	r30, 0x62	; 98
 208:	f7 07       	cpc	r31, r23
 20a:	a1 f7       	brne	.-24     	; 0x1f4 <main+0x148>
    comparisonFrValue = s >> AVER_SHIFT;
 20c:	87 e0       	ldi	r24, 0x07	; 7
 20e:	56 95       	lsr	r21
 210:	47 95       	ror	r20
 212:	37 95       	ror	r19
 214:	27 95       	ror	r18
 216:	8a 95       	dec	r24
 218:	d1 f7       	brne	.-12     	; 0x20e <main+0x162>
 21a:	a9 01       	movw	r20, r18
 21c:	b5 cf       	rjmp	.-150    	; 0x188 <main+0xdc>

0000021e <_exit>:
 21e:	f8 94       	cli

00000220 <__stop_program>:
 220:	ff cf       	rjmp	.-2      	; 0x220 <__stop_program>
